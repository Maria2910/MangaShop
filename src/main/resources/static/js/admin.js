// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
const API_BASE = '/admin/mangas';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
function getCsrfToken() {
    const token = document.querySelector('meta[name="_csrf"]')?.getAttribute('content');
    const header = document.querySelector('meta[name="_csrf_header"]')?.getAttribute('content');

    if (!token) {
        console.warn('CSRF token not found');
        return null;
    }

    return {
        token: token,
        headerName: header || 'X-CSRF-TOKEN'
    };
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function makeRequest(url, method, data = null) {
    const csrf = getCsrfToken();

    const config = {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
    if (csrf) {
        config.headers[csrf.headerName] = csrf.token;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (data) {
        config.body = JSON.stringify(data);
    }

    console.log(`üîÑ Making ${method} request to: ${url}`, data);

    try {
        const response = await fetch(url, config);
        console.log(`üì® Response status: ${response.status} ${response.statusText}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
        const contentType = response.headers.get('content-type');
        console.log(`üìÑ Content-Type: ${contentType}`);

        if (!response.ok) {
            let errorText;
            try {
                const errorData = await response.json();
                errorText = errorData.message || JSON.stringify(errorData);
            } catch (e) {
                errorText = await response.text();
            }
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if (contentType && contentType.includes('application/json')) {
            const result = await response.json();
            console.log('‚úÖ JSON response:', result);
            return result;
        } else {
            const text = await response.text();
            console.log('üìù Text response:', text);
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –Ω–æ —Å—Ç–∞—Ç—É—Å 200, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
            return { success: true, message: 'Operation completed' };
        }

    } catch (error) {
        console.error('‚ùå Request failed:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'success') {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let container = document.getElementById('ajax-notifications');
    if (!container) {
        container = document.createElement('div');
        container.id = 'ajax-notifications';
        container.className = 'ajax-notifications';
        document.body.appendChild(container);
    }

    const notification = document.createElement('div');
    notification.className = `admin-alert ${type}`;
    notification.innerHTML = `
        <span>${message}</span>
        <button type="button" class="admin-alert-close">&times;</button>
    `;

    container.appendChild(notification);

    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
    notification.querySelector('.admin-alert-close').addEventListener('click', () => {
        notification.remove();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
async function updatePrice(mangaId) {
    const priceInput = document.getElementById(`price-${mangaId}`);
    const price = parseFloat(priceInput.value);
    const saveButton = priceInput.nextElementSibling;

    if (isNaN(price) || price < 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', 'error');
        priceInput.focus();
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const originalText = saveButton.innerHTML;
    saveButton.innerHTML = '‚è≥';
    saveButton.disabled = true;

    try {
        console.log(`üí∞ Updating price for manga ${mangaId} to ${price}`);

        const result = await makeRequest(
            `${API_BASE}/${mangaId}/update-price`,
            'POST',
            { price: price }
        );

        console.log('üí∞ Price update result:', result);

        if (result && result.success) {
            showNotification('‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        } else {
            const errorMessage = result?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            showNotification('‚ùå ' + errorMessage, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: ' + error.message, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        saveButton.innerHTML = originalText;
        saveButton.disabled = false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
async function updateStock(mangaId) {
    const stockInput = document.getElementById(`stock-${mangaId}`);
    const stock = parseInt(stockInput.value);
    const saveButton = stockInput.nextElementSibling;

    if (isNaN(stock) || stock < 0) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'error');
        stockInput.focus();
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const originalText = saveButton.innerHTML;
    saveButton.innerHTML = '‚è≥';
    saveButton.disabled = true;

    try {
        console.log(`üì¶ Updating stock for manga ${mangaId} to ${stock}`);

        const result = await makeRequest(
            `${API_BASE}/${mangaId}/update-stock`,
            'POST',
            { stockQuantity: stock }
        );

        console.log('üì¶ Stock update result:', result);

        if (result && result.success) {
            showNotification('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        } else {
            const errorMessage = result?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            showNotification('‚ùå ' + errorMessage, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ' + error.message, 'error');
    } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        saveButton.innerHTML = originalText;
        saveButton.disabled = false;
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–Ω–≥–∏
async function deleteManga(mangaId, button) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –º–∞–Ω–≥—É?')) {
        return;
    }

    const row = button.closest('tr');

    try {
        console.log(`üóëÔ∏è Deleting manga ${mangaId}`);

        const result = await makeRequest(
            `${API_BASE}/${mangaId}/delete`,
            'POST'
        );

        console.log('üóëÔ∏è Delete result:', result);

        if (result && result.success) {
            showNotification('üóëÔ∏è –ú–∞–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            // –ü–ª–∞–≤–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
            row.style.opacity = '0';
            row.style.transition = 'opacity 0.3s ease';
            setTimeout(() => {
                row.remove();
                // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if (document.querySelectorAll('.admin-table tbody tr').length === 0) {
                    showEmptyState();
                }
            }, 300);
        } else {
            const errorMessage = result?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            showNotification('‚ùå ' + errorMessage, 'error');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
    }
}

// –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function showEmptyState() {
    const tableBody = document.querySelector('.admin-table tbody');
    if (tableBody && tableBody.children.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="6" class="admin-empty">
                    <i class="fas fa-book-open"></i>
                    <h3>–ú–∞–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –º–∞–Ω–≥—É –≤ –∫–∞—Ç–∞–ª–æ–≥</p>
                </td>
            </tr>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîÑ Admin JS loaded with enhanced error handling');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    document.querySelectorAll('.price-input, .stock-input').forEach(input => {
        input.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const mangaId = this.id.split('-')[1];
                if (this.classList.contains('price-input')) {
                    updatePrice(mangaId);
                } else {
                    updateStock(mangaId);
                }
            }
        });
    });

    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∏–Ω–ø—É—Ç–∞—Ö
    document.querySelectorAll('.admin-input').forEach(input => {
        input.addEventListener('click', function() {
            this.select();
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    document.querySelectorAll('.admin-alert-close').forEach(button => {
        button.addEventListener('click', function() {
            this.closest('.admin-alert').style.display = 'none';
        });
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log('‚úÖ Admin JS initialized successfully');
});